#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>

#define FILENAME "dados_investimentos.txt"

// Enum para os tipos de investimento
typedef enum {
    PREFIXADO,
    IPCA,
    SELIC,
    CDI
} TipoInvestimento;

// Estrutura de Data
typedef struct {
    int day;
    int month;
    int year;
} Data;

// Estrutura de Investimento
typedef struct {
    Data dataAplicacao;
    float valorAplicado;
    float valorBruto;
    float imposto;
    float taxaJuros;
    TipoInvestimento tipo;
    char nome[50];
} Investimento;

// Estrutura de Titular
typedef struct {
    char nomeTitular[50];
    Investimento* investimentos;
    int qtdInvestimentos;
} Titular;

// Variável global para a data atual
Data dataAtual;

// Função para calcular o número de dias entre duas datas
int calcularDias(Data inicio, Data fim) {
    struct tm a = {0,0,0,inicio.day,inicio.month-1,inicio.year-1900};
    struct tm b = {0,0,0,fim.day,fim.month-1,fim.year-1900};
    time_t x = mktime(&a);
    time_t y = mktime(&b);
    double difference = difftime(y, x) / (60 * 60 * 24);
    return (int)difference;
}

// Função para atualizar o investimento com base na taxa de juros e tempo
void atualizarInvestimento(Investimento* inv) {
    int dias = calcularDias(inv->dataAplicacao, dataAtual);
    float taxaDiaria = pow(1 + inv->taxaJuros / 100, 1.0 / 365) - 1;
    inv->valorBruto = inv->valorAplicado * pow(1 + taxaDiaria, dias);
    inv->imposto = inv->valorBruto * 0.15;  // Exemplo de cálculo de imposto
}

// Função para imprimir o valor bruto total de um titular
void imprimirValorBrutoTotal(Titular* titular) {
    float totalBruto = 0.0;
    for (int i = 0; i < titular->qtdInvestimentos; i++) {
        totalBruto += titular->investimentos[i].valorBruto;
    }
    printf("Valor Bruto Total de %s: R$ %.2f\n", titular->nomeTitular, totalBruto);
}

// Função para imprimir o valor líquido total de um titular
void imprimirValorLiquidoTotal(Titular* titular) {
    float totalLiquido = 0.0;
    for (int i = 0; i < titular->qtdInvestimentos; i++) {
        totalLiquido += titular->investimentos[i].valorBruto - titular->investimentos[i].imposto;
    }
    printf("Valor Líquido Total de %s: R$ %.2f\n", titular->nomeTitular, totalLiquido);
}

// Função para criar um investimento
Investimento criarInvestimento() {
    Investimento inv;

    printf("Dia da aplicação: ");
    scanf("%d", &inv.dataAplicacao.day);
    printf("Mês da aplicação: ");
    scanf("%d", &inv.dataAplicacao.month);
    printf("Ano da aplicação: ");
    scanf("%d", &inv.dataAplicacao.year);

    printf("Valor aplicado: ");
    scanf("%f", &inv.valorAplicado);

    printf("Tipo de investimento (0: Prefixado, 1: IPCA+, 2: Selic, 3: CDI): ");
    int tipo;
    scanf("%d", &tipo);
    inv.tipo = (TipoInvestimento)tipo;

    printf("Nome do investimento: ");
    scanf(" %[^\n]", inv.nome);

    printf("Taxa de juros anual (%%): ");
    scanf("%f", &inv.taxaJuros);

    atualizarInvestimento(&inv);

    return inv;
}

// Função para salvar os dados em um arquivo
void salvarDados(Titular* titular) {
    FILE* arquivo = fopen(FILENAME, "w");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo para salvar os dados.\n");
        return;
    }

    // Salvando informações do titular
    fprintf(arquivo, "%s\n", titular->nomeTitular);
    fprintf(arquivo, "%d\n", titular->qtdInvestimentos);

    // Salvando cada investimento
    for (int i = 0; i < titular->qtdInvestimentos; i++) {
        Investimento* inv = &titular->investimentos[i];
        fprintf(arquivo, "%d %d %d\n", inv->dataAplicacao.day, inv->dataAplicacao.month, inv->dataAplicacao.year);
        fprintf(arquivo, "%.2f %.2f %.2f %.2f %d %s\n", inv->valorAplicado, inv->valorBruto, inv->imposto, inv->taxaJuros, inv->tipo, inv->nome);
    }

    fclose(arquivo);
    printf("Dados salvos com sucesso!\n");
}

// Função para carregar os dados do arquivo
Titular carregarDados() {
    Titular titular;
    FILE* arquivo = fopen(FILENAME, "r");
    if (arquivo == NULL) {
        printf("Nenhum arquivo de dados encontrado. Criando um novo titular.\n");
        titular.qtdInvestimentos = 0;
        titular.investimentos = NULL;
        return titular;
    }

    // Carregando informações do titular
    fscanf(arquivo, " %[^\n]", titular.nomeTitular);
    fscanf(arquivo, "%d", &titular.qtdInvestimentos);

    titular.investimentos = (Investimento*) malloc(titular.qtdInvestimentos * sizeof(Investimento));

    // Carregando cada investimento
    for (int i = 0; i < titular.qtdInvestimentos; i++) {
        Investimento* inv = &titular->investimentos[i];
        fscanf(arquivo, "%d %d %d", &inv->dataAplicacao.day, &inv->dataAplicacao.month, &inv->dataAplicacao.year);
        fscanf(arquivo, "%f %f %f %f %d %[^\n]", &inv->valorAplicado, &inv->valorBruto, &inv->imposto, &inv->taxaJuros, (int*)&inv->tipo, inv->nome);
    }

    fclose(arquivo);
    printf("Dados carregados com sucesso!\n");
    return titular;
}

// Função principal
int main() {
    // Definindo a data atual
    dataAtual.day = 6;
    dataAtual.month = 9;
    dataAtual.year = 2024;

    Titular titular = carregarDados();

    int opcao;
    do {
        printf("\n----- MENU -----\n");
        printf("1. Ver investimentos\n");
        printf("2. Adicionar investimento\n");
        printf("3. Ver total bruto e líquido\n");
        printf("4. Salvar e sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                imprimirValorBrutoTotal(&titular);
                imprimirValorLiquidoTotal(&titular);
                break;
            case 2: {
                titular.qtdInvestimentos++;
                titular.investimentos = (Investimento*) realloc(titular.investimentos, titular.qtdInvestimentos * sizeof(Investimento));
                titular.investimentos[titular.qtdInvestimentos - 1] = criarInvestimento();
                break;
            }
            case 3:
                imprimirValorBrutoTotal(&titular);
                imprimirValorLiquidoTotal(&titular);
                break;
            case 4:
                salvarDados(&titular);
                break;
            default:
                printf("Opção inválida! Tente novamente.\n");
        }
    } while (opcao != 4);

    // Liberando memória
    if (titular.investimentos != NULL) {
        free(titular.investimentos);
    }

    return 0;
}
